'\" t
.\"     Title: mklib_init
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.0 <http://docbook.sf.net/>
.\"      Date: 05/30/2012
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "MKLIB_INIT" "3" "05/30/2012" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
mklib_init \- sets up a libmonkey context
.SH "SYNOPSIS"
.sp
\fB#include <monkey\&.h>\fR
.sp
\fBint (*ipcheck_f)(const char *\fR\fB\fIip\fR\fR\fB);\fR
.sp
\fBint (*urlcheck_f)(const char *\fR\fB\fIurl\fR\fR\fB);\fR
.sp
.nf
\fBint (*data_f)(const mklib_session *\fR\fB\fIsr\fR\fR\fB, const char *\fR\fB\fIvhost\fR\fR\fB, const char *\fR\fB\fIurl\fR\fR\fB,
              const char *\fR\fB\fIget\fR\fR\fB, const char *\fR\fB\fIpost\fR\fR\fB,
              unsigned int *\fR\fB\fIstatus\fR\fR\fB, const char \fR\fB**\fR\fB\fIcontent\fR\fR\fB,
              unsigned long *\fR\fB\fIcontent_len\fR\fR\fB, char *\fR\fB\fIheader\fR\fR\fB);\fR
.fi
.sp
\fBvoid (*close_f)(const mklib_session *\fR\fB\fIsr\fR\fR\fB);\fR
.sp
.nf
\fBmklib_ctx mklib_init(const char *\fR\fB\fIaddress\fR\fR\fB, unsigned int \fR\fB\fIport\fR\fR\fB,
                     unsigned int \fR\fB\fIplugins\fR\fR\fB, const char *\fR\fB\fIdocumentroot\fR\fR\fB,
                     ipcheck_f, urlcheck_f, data_f, close_f);\fR
.fi
.SH "DESCRIPTION"
.sp
The \fBmklib_init\fR() function creates a libmonkey context with the given settings\&.
.sp
You may use NULL for the char */function pointer and 0 for the int arguments to use the defaults for each\&.
.sp
The \fIaddress\fR argument gives the IP to which to bind\&. The default is to bind to all\&.
.sp
The \fIport\fR argument gives the port to bind to\&. The default is 2001\&. Note that ports <= 1024 require root permissions\&.
.sp
The \fIplugins\fR argument is an OR\(cqed result of valid, library\-compliant plugins\&. Currently the allowed options are \fIMKLIB_LIANA\fR and \fIMKLIB_LIANA_SSL\fR\&. The default is \fIMKLIB_LIANA\fR\&.
.sp
The \fIdocumentroot\fR argument gives the path from where to serve pages\&. The default is none, that is, no files will be served no matter the request\&. This often makes sense if you plan to serve all requests dynamically yourself via the data callback\&.
.SH "CALLBACKS"
.sp
The \fBipcheck_f\fR() callback is called right after a new connection is established\&. It is given the IP in text form, and is expected to return \fIMKLIB_FALSE\fR if the connection is to be dropped\&.
.sp
The \fBurlcheck_f\fR() callback is called when the requested URL is known\&. You may use this callback to check whether the URL is valid\&. Return \fIMKLIB_FALSE\fR to drop this connection\&.
.sp
The \fBdata_f\fR() callback is the main entry point for dynamic applications\&. Return \fIMKLIB_FALSE\fR if you don\(cqt want to handle this connection, and \fIMKLIB_TRUE\fR if you sent any data\&.
.PP
\fBInput arguments\fR
.RS 4
The
\fIsr\fR
argument is a unique identifier for this request\&. You may use it to match any dynamically allocated memory later in the
\fBclose_f\fR() callback\&.

The
\fIvhost\fR
argument is a unique string identifying this virtual host\&. It is "default" for the default/fallback virtual host\&.

The
\fIurl\fR
argument contains the request url, same as passed to the
\fBurlcheck_f\fR() callback\&.

The
\fIget\fR
and
\fIpost\fR
arguments contain data sent via HTTP GET and POST, if any\&. They are NULL if no data was sent via that channel\&.
.RE
.PP
\fBOutput arguments\fR
.RS 4
The
\fIstatus\fR
argument will be sent as the HTTP status code\&. If not set, it defaults to 200 "OK"\&.

The
\fIcontent\fR
argument will contain the main response you want to send for this request\&. It must stay available until the
\fBclose_f\fR() callback is called\&.

The
\fIcontent_len\fR
argument will contain the length of
\fIcontent\fR, in bytes\&.

The
\fIheader\fR
argument has 256 bytes of static space for any custom headers\&. For example, one could write the content type there: "Content\-type: text/html"
.RE
.sp
The \fBclose_f\fR() callback is called after all data for this request is served\&. You may use the callback for freeing any per\-request dynamic memory, for example\&.
.SH "RETURN VALUE"
.sp
On success, returns a valid mklib_ctx\&. On failure NULL is returned\&.
.SH "SEE ALSO"
.sp
\fBmklib_config\fR(3), \fBmklib_vhost_config\fR(3), \fBmklib_start\fR(3), \fBmklib_stop\fR(3)
.SH "RESOURCES"
.sp
See http://monkey\-project\&.com
