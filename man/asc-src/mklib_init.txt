mklib_init(3)
=============

NAME
----
mklib_init - sets up a libmonkey context

SYNOPSIS
--------
*#include <monkey.h>*

*int (*cb_ipcheck)(const char *'ip');*

*int (*cb_urlcheck)(const char *'url');*

[verse]
*int (*cb_data)(const mklib_session *'sr', const char *'vhost', const char *'url',
              const char *'get', const char *'post',
              unsigned int *'status', const char `**`'content',
              unsigned long *'content_len', char *'header');*

*void (*cb_close)(const mklib_session *'sr');*

[verse]
*mklib_ctx mklib_init(const char *'address', unsigned int 'port',
                     unsigned int 'plugins', const char *'documentroot',
                     cb_ipcheck, cb_urlcheck, cb_data, cb_close);*

DESCRIPTION
-----------
The *mklib_init*() function creates a libmonkey context with the given settings.

You may use NULL for the char */function pointer and 0 for the int arguments to
use the defaults for each.

The 'address' argument gives the IP to which to bind. The default is to bind to all.

The 'port' argument gives the port to bind to. The default is 2001. Note that ports
`<=` 1024 require root permissions.

The 'plugins' argument is an OR'ed result of valid, library-compliant plugins.
Currently the allowed options are 'MKLIB_LIANA' and 'MKLIB_LIANA_SSL'. The default is
'MKLIB_LIANA'.

The 'documentroot' argument gives the path from where to serve pages. The default is
none, that is, no files will be served no matter the request. This often makes sense
if you plan to serve all requests dynamically yourself via the data callback.

CALLBACKS
---------

The *cb_ipcheck*() callback is called right after a new connection is established.
It is given the IP in text form, and is expected to return MKLIB_FALSE if the connection
is to be dropped.

The *cb_urlcheck*() callback is called when the requested URL is known. You may use this
callback to check whether the URL is valid. Return MKLIB_FALSE to drop this connection.

The *cb_data*() callback is the main entry point for dynamic applications.
Return MKLIB_FALSE if you don't want to handle this connection, and MKLIB_TRUE if you
sent any data.

*Input arguments*::
	The 'sr' argument is a unique identifier for this request. You may use it to match
	any dynamically allocated memory later in the *cb_close*() callback. +
	The 'vhost' argument is a unique string identifying this virtual host. It is
	"default" for the default/fallback virtual host. +
	The 'url' argument contains the request url, same as passed to the *cb_urlcheck*()
	callback. +
	The 'get' and 'post' arguments contain data sent via HTTP GET and POST, if any. They
	are NULL if no data was sent via that channel.

*Output arguments*::
	The 'status' argument will be sent as the HTTP status code. If not set, it defaults
	to 200 "OK". +
	The 'content' argument will contain the main response you want to send for this
	request. It must stay available until the *cb_close*() callback is called. +
	The 'content_len' argument will contain the length of 'content', in bytes. +
	The 'header' argument has 256 bytes of static space for any custom headers.
	For example, one could write the content type there: "Content-type: text/html"


The *cb_close*() callback is called after all data for this request is served. You may use
the callback for freeing any per-request dynamic memory, for example.

RETURN VALUE
------------
On success, returns a valid mklib_ctx. On failure NULL is returned.

SEE ALSO
--------
*mklib_config*(3), *mklib_vhost_config*(3), *mklib_start*(3), *mklib_stop*(3)

RESOURCES
---------
See http://monkey-project.com

